import { useQuery } from "@tanstack/react-query";
import { useState } from "react";
import { PostWithTags } from "@shared/schema";
import Sidebar from "@/components/Sidebar";
import RightSidebar from "@/components/RightSidebar";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Link } from "wouter";
import { getRelativeTimeString } from "@/lib/utils";
import ReactMarkdown from "react-markdown";

// Component for Article previews
const ArticleCard = ({ post }: { post: PostWithTags }) => {
  const formattedDate = post.createdAt 
    ? getRelativeTimeString(new Date(post.createdAt))
    : "recently";

  // Extract first paragraph for preview
  const getFirstParagraph = () => {
    if (!post.content) return "";
    const firstParagraphMatch = post.content.match(/^(.*?)\n\n/);
    return firstParagraphMatch ? firstParagraphMatch[1] : post.content.substring(0, 150);
  };

  return (
    <Card className="mb-6 overflow-hidden border-rhino-navy/10 hover:border-rhino-orange/50 transition-all">
      <CardHeader className="pb-2 bg-rhino-peach/30">
        <div className="flex justify-between items-center mb-1">
          <CardTitle className="text-xl text-rhino-navy">{post.title}</CardTitle>
          <div className="text-sm text-gray-500">{formattedDate}</div>
        </div>
        <div className="flex flex-wrap gap-2 mt-2">
          {post.tags && post.tags.map((tag) => (
            <Badge 
              key={tag.id} 
              variant="outline" 
              className="bg-rhino-navy/10 text-rhino-navy border-rhino-navy/20"
            >
              #{tag.name}
            </Badge>
          ))}
        </div>
      </CardHeader>
      <CardContent className="pt-4">
        <CardDescription className="text-base mb-4">
          {getFirstParagraph()}...
        </CardDescription>
        <Button 
          asChild 
          className="bg-rhino-orange hover:bg-rhino-orange/90 text-white mt-2"
        >
          <Link href={`/article/${post.id}`}>Read Full Article</Link>
        </Button>
      </CardContent>
    </Card>
  );
};

// Main Articles page component
const Articles = () => {
  const [filter, setFilter] = useState("all");
  
  // Fetch all posts
  const { data: posts, isLoading, error } = useQuery<PostWithTags[]>({
    queryKey: ["/api/posts"],
    staleTime: 60000, // 1 minute
  });
  
  // Filter for informational articles only (generated by admin)
  const informationalPosts = posts?.filter(post => 
    post.isAiGenerated && 
    post.user?.isAdmin && 
    post.tags?.some(tag => 
      tag.name === "educational" || 
      tag.name === "informational" || 
      tag.name.includes("guide") || 
      tag.name.includes("explained")
    )
  ) || [];
  
  // Categories for filtering
  const categories = [
    { id: "all", name: "All Articles" },
    { id: "recovery", name: "Recovery" },
    { id: "procedures", name: "Procedures" },
    { id: "guides", name: "Guides" },
    { id: "faq", name: "FAQ" }
  ];
  
  // Apply category filter
  const filteredPosts = filter === "all" 
    ? informationalPosts 
    : informationalPosts.filter(post => 
        post.tags?.some(tag => tag.name.includes(filter) || 
          (filter === "recovery" && tag.name.includes("healing")) ||
          (filter === "procedures" && tag.name.includes("rhinoplasty")) ||
          (filter === "guides" && tag.name.includes("guide")) ||
          (filter === "faq" && tag.name.includes("faq"))
        )
      );
  
  return (
    <div className="container mx-auto px-4 py-6 flex flex-col lg:flex-row">
      {/* Left Sidebar */}
      <Sidebar />
      
      {/* Main Content */}
      <div className="flex-1 space-y-6">
        <div className="bg-white dark:bg-reddit-darkCard shadow rounded-md p-4">
          <h1 className="text-2xl font-ibm-plex font-bold text-rhino-navy mb-4">Rhinoplasty Articles & Guides</h1>
          <p className="text-gray-600 mb-4">
            Educational resources about rhinoplasty procedures, recovery, and experiences written by experts and curated for your journey.
          </p>
          
          {/* Category Filter */}
          <div className="flex flex-wrap gap-2 my-4">
            {categories.map(category => (
              <Button 
                key={category.id}
                variant={filter === category.id ? "default" : "outline"}
                className={filter === category.id 
                  ? "bg-rhino-orange hover:bg-rhino-orange/90" 
                  : "border-rhino-navy/20 hover:bg-rhino-navy/10"}
                onClick={() => setFilter(category.id)}
              >
                {category.name}
              </Button>
            ))}
          </div>
        </div>
        
        {/* Loading state */}
        {isLoading && (
          <Card className="p-6">
            <div className="animate-pulse space-y-4">
              <div className="h-6 bg-gray-200 rounded w-3/4"></div>
              <div className="h-4 bg-gray-200 rounded w-1/2"></div>
              <div className="h-4 bg-gray-200 rounded w-full"></div>
              <div className="h-4 bg-gray-200 rounded w-full"></div>
            </div>
          </Card>
        )}
        
        {/* Error state */}
        {error && (
          <Card className="p-6 border-red-300">
            <p className="text-red-500">Error loading articles. Please try again later.</p>
          </Card>
        )}
        
        {/* No articles found */}
        {!isLoading && !error && filteredPosts.length === 0 && (
          <Card className="p-6 text-center">
            <p className="text-gray-500">No articles found in this category.</p>
          </Card>
        )}
        
        {/* Articles grid */}
        <div className="grid gap-6 md:grid-cols-1 lg:grid-cols-1">
          {filteredPosts.map(post => (
            <ArticleCard key={post.id} post={post} />
          ))}
        </div>
      </div>
      
      {/* Right Sidebar */}
      <RightSidebar />
    </div>
  );
};

export default Articles;